<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--Rendered using the Haskell Html Library v0.2-->
<HTML
><HEAD
><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
><TITLE
>CrossPackageDocs</TITLE
><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
></SCRIPT
><SCRIPT TYPE="text/javascript"
>window.onload = function () {setSynopsis("mini_CrossPackageDocs.html")};</SCRIPT
></HEAD
><BODY
><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
><TR
><TD CLASS="topbar"
><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
><TR
><TD
><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
></TD
><TD CLASS="title"
></TD
><TD CLASS="topbut"
><A HREF="">Contents</A
></TD
><TD CLASS="topbut"
><A HREF="">Index</A
></TD
></TR
></TABLE
></TD
></TR
><TR
><TD CLASS="modulebar"
><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
><TR
><TD
><FONT SIZE="6"
>CrossPackageDocs</FONT
></TD
></TR
></TABLE
></TD
></TR
><TR
><TD CLASS="s15"
></TD
></TR
><TR
><TD CLASS="s15"
></TD
></TR
><TR
><TD CLASS="section1"
>Synopsis</TD
></TR
><TR
><TD CLASS="s15"
></TD
></TR
><TR
><TD CLASS="body"
><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
><TR
><TD CLASS="decl"
><A HREF="">map</A
> ::  (a -&gt; b) -&gt; [a] -&gt; [b]</TD
></TR
><TR
><TD CLASS="s8"
></TD
></TR
><TR
><TD CLASS="decl"
><SPAN CLASS="keyword"
>class</SPAN
>  <A HREF="">Monad</A
> m  <SPAN CLASS="keyword"
>where</SPAN
></TD
></TR
><TR
><TD CLASS="body"
><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
><TR
><TD CLASS="decl"
><A HREF="">(&gt;&gt;=)</A
> ::  m a -&gt; (a -&gt; m b) -&gt; m b</TD
></TR
><TR
><TD CLASS="decl"
><A HREF="">(&gt;&gt;)</A
> ::  m a -&gt; m b -&gt; m b</TD
></TR
><TR
><TD CLASS="decl"
><A HREF="">return</A
> ::  a -&gt; m a</TD
></TR
><TR
><TD CLASS="decl"
><A HREF="">fail</A
> ::  <A HREF="">String</A
> -&gt; m a</TD
></TR
></TABLE
></TD
></TR
><TR
><TD CLASS="s8"
></TD
></TR
><TR
><TD CLASS="decl"
><A HREF="">runInteractiveProcess</A
> :: <A HREF="">FilePath</A
> -&gt; [<A HREF="">String</A
>] -&gt; <A HREF="">Maybe</A
> <A HREF="">FilePath</A
> -&gt; <A HREF="">Maybe</A
> [(<A HREF="">String</A
>, <A HREF="">String</A
>)] -&gt; <A HREF="">IO</A
> (<A HREF="">Handle</A
>, <A HREF="">Handle</A
>, <A HREF="">Handle</A
>, <A HREF="">ProcessHandle</A
>)</TD
></TR
></TABLE
></TD
></TR
><TR
><TD CLASS="s15"
></TD
></TR
><TR
><TD CLASS="section1"
>Documentation</TD
></TR
><TR
><TD CLASS="s15"
></TD
></TR
><TR
><TD CLASS="decl"
><A NAME="v:map"
><A NAME="v%3Amap"
></A
></A
><B
>map</B
> ::  (a -&gt; b) -&gt; [a] -&gt; [b]</TD
></TR
><TR
><TD CLASS="doc"
><P
><TT
><A HREF="">map</A
></TT
> <TT
>f xs</TT
> is the list obtained by applying <TT
>f</TT
> to each element
 of <TT
>xs</TT
>, i.e.,
</P
><TT
> map f [x1, x2, ..., xn] == [f x1, f x2, ..., f xn]
 map f [x1, x2, ...] == [f x1, f x2, ...]
</TT
></TD
></TR
><TR
><TD CLASS="s15"
></TD
></TR
><TR
><TD CLASS="decl"
><SPAN CLASS="keyword"
>class</SPAN
>  <A NAME="t:Monad"
><A NAME="t%3AMonad"
></A
></A
><B
>Monad</B
> m  <SPAN CLASS="keyword"
>where</SPAN
></TD
></TR
><TR
><TD CLASS="body"
><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
><TR
><TD CLASS="ndoc"
><P
>The <TT
><A HREF="">Monad</A
></TT
> class defines the basic operations over a <EM
>monad</EM
>,
a concept from a branch of mathematics known as <EM
>category theory</EM
>.
From the perspective of a Haskell programmer, however, it is best to
think of a monad as an <EM
>abstract datatype</EM
> of actions.
Haskell's <TT
>do</TT
> expressions provide a convenient syntax for writing
monadic expressions.
</P
><P
>Minimal complete definition: <TT
><A HREF="">&gt;&gt;=</A
></TT
> and <TT
><A HREF="">return</A
></TT
>.
</P
><P
>Instances of <TT
><A HREF="">Monad</A
></TT
> should satisfy the following laws:
</P
><TT
> return a &gt;&gt;= k  ==  k a
 m &gt;&gt;= return  ==  m
 m &gt;&gt;= (\x -&gt; k x &gt;&gt;= h)  ==  (m &gt;&gt;= k) &gt;&gt;= h
</TT
><P
>Instances of both <TT
><A HREF="">Monad</A
></TT
> and <TT
><A HREF="">Functor</A
></TT
> should additionally satisfy the law:
</P
><TT
> fmap f xs  ==  xs &gt;&gt;= return . f
</TT
><P
>The instances of <TT
><A HREF="">Monad</A
></TT
> for lists, Data.Maybe.Maybe and System.IO.IO
defined in the <A HREF="">Prelude</A
> satisfy these laws.
</P
></TD
></TR
><TR
><TD CLASS="s8"
></TD
></TR
><TR
><TD CLASS="section4"
>Methods</TD
></TR
><TR
><TD CLASS="body"
><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
><TR
><TD CLASS="decl"
><A NAME="v:>>="
><A NAME="v%3A%3E%3E%3D"
></A
></A
><B
>(&gt;&gt;=)</B
> ::  m a -&gt; (a -&gt; m b) -&gt; m b</TD
></TR
><TR
><TD CLASS="doc"
>Sequentially compose two actions, passing any value produced
 by the first as an argument to the second.
</TD
></TR
><TR
><TD CLASS="s8"
></TD
></TR
><TR
><TD CLASS="decl"
><A NAME="v:>>"
><A NAME="v%3A%3E%3E"
></A
></A
><B
>(&gt;&gt;)</B
> ::  m a -&gt; m b -&gt; m b</TD
></TR
><TR
><TD CLASS="doc"
>Sequentially compose two actions, discarding any value produced
 by the first, like sequencing operators (such as the semicolon)
 in imperative languages.
</TD
></TR
><TR
><TD CLASS="s8"
></TD
></TR
><TR
><TD CLASS="decl"
><A NAME="v:return"
><A NAME="v%3Areturn"
></A
></A
><B
>return</B
> ::  a -&gt; m a</TD
></TR
><TR
><TD CLASS="doc"
>Inject a value into the monadic type.
</TD
></TR
><TR
><TD CLASS="s8"
></TD
></TR
><TR
><TD CLASS="decl"
><A NAME="v:fail"
><A NAME="v%3Afail"
></A
></A
><B
>fail</B
> ::  <A HREF="">String</A
> -&gt; m a</TD
></TR
><TR
><TD CLASS="doc"
>Fail with a message.  This operation is not part of the
 mathematical definition of a monad, but is invoked on pattern-match
 failure in a <TT
>do</TT
> expression.
</TD
></TR
></TABLE
></TD
></TR
><TR
><TD CLASS="s8"
></TD
></TR
><TR
><TD CLASS="section4"
><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Monad')" ALT="show/hide"
> Instances</TD
></TR
><TR
><TD CLASS="body"
><DIV ID="i:Monad" STYLE="display:block;"
><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
><TR
><TD CLASS="arg"
><A HREF="">Monad</A
> []</TD
><TD CLASS="rdoc"
></TD
></TR
><TR
><TD CLASS="arg"
><A HREF="">Monad</A
> <A HREF="">IO</A
></TD
><TD CLASS="rdoc"
></TD
></TR
><TR
><TD CLASS="arg"
><A HREF="">Monad</A
> Q</TD
><TD CLASS="rdoc"
></TD
></TR
><TR
><TD CLASS="arg"
><A HREF="">Monad</A
> <A HREF="">Maybe</A
></TD
><TD CLASS="rdoc"
></TD
></TR
><TR
><TD CLASS="arg"
><A HREF="">Monad</A
> ((-&gt;) r)</TD
><TD CLASS="rdoc"
></TD
></TR
></TABLE
></DIV
></TD
></TR
></TABLE
></TD
></TR
><TR
><TD CLASS="s15"
></TD
></TR
><TR
><TD CLASS="decl"
><A NAME="v:runInteractiveProcess"
><A NAME="v%3ArunInteractiveProcess"
></A
></A
><B
>runInteractiveProcess</B
></TD
></TR
><TR
><TD CLASS="body"
><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
><TR
><TD CLASS="arg"
>:: <A HREF="">FilePath</A
></TD
><TD CLASS="rdoc"
>Filename of the executable
</TD
></TR
><TR
><TD CLASS="arg"
>-&gt; [<A HREF="">String</A
>]</TD
><TD CLASS="rdoc"
>Arguments to pass to the executable
</TD
></TR
><TR
><TD CLASS="arg"
>-&gt; <A HREF="">Maybe</A
> <A HREF="">FilePath</A
></TD
><TD CLASS="rdoc"
>Optional path to the working directory
</TD
></TR
><TR
><TD CLASS="arg"
>-&gt; <A HREF="">Maybe</A
> [(<A HREF="">String</A
>, <A HREF="">String</A
>)]</TD
><TD CLASS="rdoc"
>Optional environment (otherwise inherit)
</TD
></TR
><TR
><TD CLASS="arg"
>-&gt; <A HREF="">IO</A
> (<A HREF="">Handle</A
>, <A HREF="">Handle</A
>, <A HREF="">Handle</A
>, <A HREF="">ProcessHandle</A
>)</TD
><TD CLASS="rdoc"
></TD
></TR
><TR
><TD CLASS="ndoc" COLSPAN="2"
><P
>Runs a raw command, and returns <TT
><A HREF="">Handle</A
></TT
>s that may be used to communicate
     with the process via its <TT
>stdin</TT
>, <TT
>stdout</TT
> and <TT
>stderr</TT
> respectively.
</P
><P
>For example, to start a process and feed a string to its stdin:
</P
><TT
>   (inp,out,err,pid) &lt;- runInteractiveProcess &quot;...&quot;
   forkIO (hPutStr inp str)
</TT
><P
>The <TT
><A HREF="">Handle</A
></TT
>s are initially in binary mode; if you need them to be
    in text mode then use <TT
><A HREF="">hSetBinaryMode</A
></TT
>.
</P
></TD
></TR
></TABLE
></TD
></TR
><TR
><TD CLASS="s15"
></TD
></TR
><TR
><TD CLASS="botbar"
>Produced by <A HREF="">Haddock</A
> version 2.7.2</TD
></TR
></TABLE
></BODY
></HTML
>
